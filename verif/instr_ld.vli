macro unsigned corr_loaded_data(unsigned instr_func3) :=
    case(instr_func3)
    3'h0: { {24{data_rdata_i[7]}}, data_rdata_i[7:0]};
    3'h1: { {16{data_rdata_i[15]}}, data_rdata_i[15:0]};
    3'h2: data_rdata_i;
    3'h4: data_rdata_i[7:0];
    3'h5: data_rdata_i[15:0];
    default:  0;
    endcase;
end macro;

macro property instr_LD (unsigned instr_func3):=
disable iff: !rst_ni;
    dependencies: empty;
    for timepoints:
        t_gnt = t+0..max_wait_inst_mem_gnt waits_for complete instr_gnt_i,
        t_gnt2 = t_gnt+1,
        t_if = t_gnt2+0..max_wait_inst_mem_rvalid waits_for complete instr_rvalid_i,
        t_id = t_if+1,
        t_gnt3 = t_id+0..max_wait_data_mem_gnt waits_for complete data_gnt_i,
        t_gnt4 = t_gnt3+1,
        t_wb = t_gnt4+0..max_wait_data_mem_rvalid waits_for complete data_rvalid_i;
    freeze:
        opcode = instr_rdata_i[6:0]@t_if,
        rd = instr_rdata_i[11:7]@t_if,
        func3 = instr_rdata_i[14:12]@t_if,
        rs1 = instr_rdata_i[19:15]@t_if,
        rs2 = instr_rdata_i[24:20]@t_if,
        shamt = rs2@t_if,
        imm = instr_rdata_i[31:20]@t_if,
        PC_frozen = pc_if@t_if,
        op1Data = id_stage_i/registers_i/rf_reg[rs1]@t_id,
        op2Data = signExtend(imm) @t_id,
        res = unsigned(signed(op1Data) + signed(op2Data))[31:0]@t_id,
        regFile = id_stage_i/registers_i/rf_reg@t_id,
        loaded_data = corr_loaded_data(instr_func3)@t_wb;
    assume:
        //core state
        at t:       conceptual_state;
        
        //inst mem waits
        at t:       bounded_inst_gnt_wait;
        at t_gnt2:  bounded_inst_rvalid_wait;

        //correct pipeline state
        at t_gnt:   data_rvalid_i == 0;
        at t_if-1:  if_stage_i/prefetch_buffer_i/fifo_i/valid == 0;
        at t_if:    if_stage_i/prefetch_buffer_i/fifo_i/valid == 1;
        at t_if:    id_in_ready == 1;
        at t_if:    if_stage_i/if_id_pipe_reg_we == 1; //IF to ID write enable
        at t_if:    if_stage_i/prefetch_buffer_i/fifo_i/out_addr_o[1] == 0; //uncompressed instr

        //inputs
        at t_if:    instr_rdata_i[6:0] == 7'h3; //set opcode
        at t_if:    instr_rdata_i[11:7] < 6; //r0 to r5
        at t_if:    instr_rdata_i[11:7] > 0; //no wb to r0
        at t_if:    instr_rdata_i[14:12] == instr_func3; //set func
        at t_if:    instr_rdata_i[19:15] < 6; //r0 to r5     
        at t_if:    if_stage_i/prefetch_buffer_i/addr_valid; 
        at t_if:    load_store_unit_i/ls_fsm_cs == IDLE;
        at t_if:    res[1:0] == 2'h0; //alligned memory access
        
        //data mem waits
        at t_id:    bounded_data_gnt_wait;
        at t_gnt4:  bounded_data_rvalid_wait;     
    prove:
        //IF output
        at t_id:    instr_rdata_id[6:0] == opcode;
        at t_id:    instr_rdata_id[11:7] ==rd;
        at t_id:    instr_rdata_id[14:12] == func3;
        at t_id:    instr_rdata_id[19:15] == rs1;
        at t_id:    instr_rdata_id[31:20] == imm;

        //ID output
        at t_id:    alu_operator_ex == ALU_ADD;
        at t_id:    alu_operand_a_ex == op1Data;
        at t_id:    alu_operand_b_ex == op2Data;

        //EX output
        at t_id:    alu_adder_result_ex == res;
        at t_id:    id_stage_i/regfile_wdata_sel == RF_WD_LSU;

        //MEM REQ
        during[t_id, t_gnt3]:    data_req_out;
        during[t_id, t_gnt3]:    data_addr_o == {res[31:2],2'h0};
        during[t_id, t_gnt3]:    data_we_o == 0;
        during[t_id, t_gnt3]:    data_be_o == (instr_func3[1:0] == 2'h0? 4'h1: instr_func3[1:0] == 2'h1? 4'h3 : 4'hF);
        
        //WB
        at t_wb:      regfile_wdata_lsu == loaded_data;
        at t_wb+1:    id_stage_i/registers_i/rf_reg[rd] == loaded_data;
        at t_wb+1:    foreach r in 0..31: if(r != rd) id_stage_i/registers_i/rf_reg[r] == regFile[r];endif; end foreach;
        at t_gnt3:    conceptual_state;

        //PC
        at t_gnt3:    pc_if == (PC_frozen == 32'hfffffffc ? 32'h0 : PC_frozen + 4);
    right_hook: t_gnt3;
end macro;